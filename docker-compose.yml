version: "3.4"

services:
  traefik:
    container_name: traefik
    image: traefik
    ports:
      - 80:80
      - 443:443
      - 443:443/udp
      - 500:500/udp
      - 4500:4500/udp
    command:
      # Globals
      # - "--log.level=DEBUG"
      - --api.dashboard=true
      - --global.sendAnonymousUsage=false
      # Docker
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      # Entrypoints
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --entrypoints.openvpn.address=:443/udp
      - --entrypoints.ipsec.address=:500/udp
      - --entrypoints.ipsec2.address=:4500/udp
      # LetsEncrypt
      - --certificatesresolvers.do.acme.dnschallenge=true
      - --certificatesresolvers.do.acme.dnschallenge.provider=digitalocean
      - --certificatesresolvers.do.acme.email=${EMAIL}
      - --certificatesresolvers.do.acme.storage=/etc/traefik/acme.json
    volumes:
      - ./traefik:/etc/traefik
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - DO_AUTH_TOKEN=${DO_API_TOKEN}
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`traefik.${HOST}`)
      - traefik.http.routers.traefik.entrypoints=https
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.middlewares=oauth
      - traefik.http.routers.traefik.service=api@internal
      #OAuth
      - traefik.http.middlewares.oauth.forwardauth.address=http://traefik-oauth:4181
      - traefik.http.middlewares.oauth.forwardauth.trustForwardHeader=true
      - traefik.http.middlewares.oauth.forwardauth.authResponseHeaders=X-Forwarded-User
      #HSTS
      - traefik.http.middlewares.hsts.headers.stspreload=true
      - traefik.http.middlewares.hsts.headers.stsseconds=31536000
      - traefik.http.middlewares.hsts.headers.stsincludesubdomains=true
      # Wildcard cert
      - traefik.http.routers.traefik.tls.certresolver=do
      - traefik.http.routers.traefik.tls.domains[0].main=${HOST}
      - traefik.http.routers.traefik.tls.domains[0].sans=*.${HOST}
      # Global http-->https
      - traefik.http.routers.http-catchall.entrypoints=http
      - traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)
      - traefik.http.routers.http-catchall.middlewares=https-redirect
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https

  traefik-oauth:
    container_name: traefik-oauth
    image: thomseddon/traefik-forward-auth
    environment:
      - PROVIDERS_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - PROVIDERS_GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - SECRET=${OAUTH_SECRET}
      - COOKIE_DOMAIN=${HOST}
      - AUTH_HOST=oauth.${HOST}
      - WHITELIST=${OAUTH_WHITELIST}
    labels:
      - traefik.enable=true
      - traefik.http.routers.oauth.rule=Host(`oauth.${HOST}`)
      - traefik.http.routers.oauth.entrypoints=https
      - traefik.http.routers.oauth.tls=true
      - traefik.http.routers.oauth.middlewares=hsts,oauth
      - traefik.http.services.oauth.loadbalancer.server.port=4181

  www:
    container_name: www
    image: nginx:alpine
    restart: unless-stopped
    volumes:
      - ./www:/www:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx-www.conf:/etc/nginx/nginx-www.conf:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.www.rule=Host(`${HOST}`)
      - traefik.http.routers.www.entrypoints=https
      - traefik.http.routers.www.tls=true
      - traefik.http.routers.www.middlewares=hsts

  openvpn:
    container_name: openvpn
    image: kylemanna/openvpn
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    volumes:
      - ./openvpn:/etc/openvpn
    labels:
      - traefik.enable=true
      - traefik.udp.routers.openvpn.entrypoints=openvpn
      - traefik.udp.routers.openvpn.service=openvpn
      - traefik.udp.services.openvpn.loadbalancer.server.port=1194

  openvpn-tcp:
    container_name: openvpn-tcp
    image: kylemanna/openvpn
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    volumes:
      - ./openvpn:/etc/openvpn:ro
    command: ovpn_run --proto tcp
    labels:
      - traefik.enable=true
      - traefik.tcp.routers.openvpn.rule=HostSNI(`*`)
      - traefik.tcp.routers.openvpn.entrypoints=https
      - traefik.tcp.routers.openvpn.service=openvpn
      - traefik.tcp.services.openvpn.loadbalancer.server.port=1194

  ipsec-vpn:
    container_name: ipsec-vpn
    image: hwdsl2/ipsec-vpn-server
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/ppp:/dev/ppp
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.accept_redirects=0
      - net.ipv4.conf.all.send_redirects=0
      - net.ipv4.conf.all.rp_filter=0
      - net.ipv4.conf.default.accept_redirects=0
      - net.ipv4.conf.default.send_redirects=0
      - net.ipv4.conf.default.rp_filter=0
      - net.ipv4.conf.eth0.send_redirects=0
      - net.ipv4.conf.eth0.rp_filter=0
    environment:
      - VPN_USER=${IPSEC_USER}
      - VPN_PASSWORD=${IPSEC_PASSWORD}
      - VPN_IPSEC_PSK=${IPSEC_PSK}
    labels:
      - traefik.enable=true
      - traefik.udp.routers.ipsec.entrypoints=ipsec
      - traefik.udp.routers.ipsec.service=ipsec
      - traefik.udp.services.ipsec.loadbalancer.server.port=500
      - traefik.udp.routers.ipsec2.entrypoints=ipsec2
      - traefik.udp.routers.ipsec2.service=ipsec2
      - traefik.udp.services.ipsec2.loadbalancer.server.port=4500

  traefik-export-cert:
    container_name: traefik-export-cert
    image: zzeneg/traefik-export-cert
    restart: unless-stopped
    environment:
      - RESOLVER=do
      - DOMAIN=${HOST}
    volumes:
      - ./traefik/acme.json:/acme.json:ro
      - ./traefik-export-cert:/export

  adguard:
    container_name: adguard
    image: adguard/adguardhome
    restart: unless-stopped
    ports:
      - 853:853
    volumes:
      - ./adguard/work:/opt/adguardhome/work
      - ./adguard/conf:/opt/adguardhome/conf
      - ./traefik-export-cert:/cert:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.adguard.rule=Host(`adguard.${HOST}`)
      - traefik.http.routers.adguard.entrypoints=https
      - traefik.http.routers.adguard.tls=true
      - traefik.http.routers.adguard.middlewares=oauth
      - traefik.http.services.adguard.loadbalancer.server.port=80

  portainer:
    container_name: portainer
    image: portainer/portainer-ce:alpine
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./portainer:/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.rule=Host(`portainer.${HOST}`)
      - traefik.http.routers.portainer.entrypoints=https
      - traefik.http.routers.portainer.tls=true
      - traefik.http.routers.portainer.middlewares=oauth
      - traefik.http.services.portainer.loadbalancer.server.port=9000
