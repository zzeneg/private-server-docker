version: '3.4'

volumes:
  openvpn-data:

services:
  traefik:
    container_name: traefik
    image: traefik
    ports:
      - 80:80
      - 443:443
    command:
      # Globals
      # - "--log.level=DEBUG"
      - "--api.dashboard=true"
      - "--global.sendAnonymousUsage=false"
      # Docker
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      # Entrypoints
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      # LetsEncrypt
      # - "--certificatesresolvers.do.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.do.acme.dnschallenge=true"
      - "--certificatesresolvers.do.acme.dnschallenge.provider=digitalocean"
      - "--certificatesresolvers.do.acme.email=${EMAIL}"
      - "--certificatesresolvers.do.acme.storage=/etc/traefik/acme.json"
    volumes:
      - ./traefik:/etc/traefik
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      DO_AUTH_TOKEN: ${DO_API_TOKEN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${HOST}`)"
      - "traefik.http.routers.traefik.entrypoints=https"
      - "traefik.http.routers.traefik.tls.certresolver=do"
      - "traefik.http.routers.traefik.middlewares=oauth"
      - "traefik.http.routers.traefik.service=api@internal"
      #OAuth
      - "traefik.http.middlewares.oauth.forwardauth.address=http://oauth:4181"
      - "traefik.http.middlewares.oauth.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.oauth.forwardauth.authResponseHeaders=X-Forwarded-User"
      # Wildcard cert
      - "traefik.http.routers.traefik.tls.domains[0].main=${HOST}"
      - "traefik.http.routers.traefik.tls.domains[0].sans=*.${HOST}"
      # Global http-->https
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=https-redirect"
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"

  traefik-forward-auth:
    container_name: oauth
    image: thomseddon/traefik-forward-auth
    environment:
      CLIENT_ID: ${GOOGLE_CLIENT_ID}
      CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      SECRET: ${OAUTH_SECRET}
      COOKIE_DOMAIN: ${HOST}
      AUTH_HOST: oauth.${HOST}
      WHITELIST: ${EMAIL}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.oauth.rule=Host(`oauth.${HOST}`)"
      - "traefik.http.routers.oauth.entrypoints=https"
      - "traefik.http.routers.oauth.tls.certresolver=do"
      - "traefik.http.routers.oauth.middlewares=oauth"
      - "traefik.http.services.oauth.loadbalancer.server.port=4181"
  
  www:
    container_name: www
    image: nginx:alpine
    restart: unless-stopped
    volumes:
      - ./www:/www:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx-www.conf:/etc/nginx/nginx-www.conf:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.www.rule=Host(`${HOST}`)"
      - "traefik.http.routers.www.entrypoints=https"
      - "traefik.http.routers.www.tls.certresolver=do"

  telegram:
    container_name: telegram
    build:
      context: https://github.com/zzeneg/docker-web-telegram.git
      args:
        HOST: telegram.${HOST}
        APP_ID: ${TELEGRAM_APP_ID}
        APP_HASH: ${TELEGRAM_APP_HASH}
        DISABLE_MINIFY: 1
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.telegram.rule=Host(`telegram.${HOST}`)"
      - "traefik.http.routers.telegram.entrypoints=https"
      - "traefik.http.routers.telegram.tls.certresolver=do"

  openvpn:
    container_name: openvpn
    image: kylemanna/openvpn
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    ports:
      - 443:1194/udp
    volumes:
      - openvpn-data:/etc/openvpn

  openvpn-tcp:
    container_name: openvpn-tcp
    image: kylemanna/openvpn
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    volumes:
      - openvpn-data:/etc/openvpn:ro
    command: ovpn_run --proto tcp
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.openvpn-tcp.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.openvpn-tcp.entrypoints=https"
      - "traefik.tcp.routers.openvpn-tcp.tls=false"
      - "traefik.tcp.routers.openvpn-tcp.service=openvpn-tcp"
      - "traefik.tcp.services.openvpn-tcp.loadbalancer.server.port=1194"

  dante:
    container_name: dante
    build:
      context: https://github.com/zzeneg/docker-dante-server.git
      args:
        USER: ${DANTE_USER}
        PASSWORD: ${DANTE_PASSWORD}
    restart: unless-stopped
    ports:
      - 8080:1080

  ble-light:
    container_name: ble-light
    image: nginx:alpine
    restart: unless-stopped
    volumes:
      - ./ble-light:/www:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx-www.conf:/etc/nginx/nginx-www.conf:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ble-light.rule=Host(`blelight.${HOST}`)"
      - "traefik.http.routers.ble-light.entrypoints=https"
      - "traefik.http.routers.ble-light.tls.certresolver=do"

  seq:
    container_name: seq
    image: datalust/seq:latest
    restart: unless-stopped
    volumes:
      - ./seq:/data
    environment:
      ACCEPT_EULA: Y
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.seq.rule=Host(`seq.${HOST}`)"
      - "traefik.http.routers.seq.entrypoints=https"
      - "traefik.http.routers.seq.tls.certresolver=do"

  sharex:
    container_name: sharex
    image: zzeneg/sharex-server
    restart: unless-stopped
    volumes:
      - ./sharex:/sharex/src/server/uploads
    environment:
      KEY: ${SHAREX_KEY}
      DOMAIN: sharex.${HOST}
      ADMIN_KEY: ${SHAREX_ADMINKEY}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sharex.rule=Host(`sharex.${HOST}`)"
      - "traefik.http.routers.sharex.entrypoints=https"
      - "traefik.http.routers.sharex.tls.certresolver=do"

  funbox:
    container_name: funbox
    build:
      context: ./funbox
    restart: unless-stopped

  duplicati:
    container_name: duplicati
    image: duplicati/duplicati
    restart: unless-stopped
    volumes:
      - ./duplicati:/data
      - .:/source
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.duplicati.rule=Host(`duplicati.${HOST}`)"
      - "traefik.http.routers.duplicati.entrypoints=https"
      - "traefik.http.routers.duplicati.tls.certresolver=do"
      - "traefik.http.routers.duplicati.middlewares=oauth"
      - "traefik.http.services.duplicati.loadbalancer.server.port=8200"

  portainer:
    container_name: portainer
    image: portainer/portainer
    restart: unless-stopped
    command: --no-auth
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./portainer:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.${HOST}`)"
      - "traefik.http.routers.portainer.entrypoints=https"
      - "traefik.http.routers.portainer.tls.certresolver=do"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
